/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Signer } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides } from "@ethersproject/contracts";

import { TreeBase } from "./TreeBase";

export class TreeBaseFactory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(overrides?: Overrides): Promise<TreeBase> {
    return super.deploy(overrides || {}) as Promise<TreeBase>;
  }
  getDeployTransaction(overrides?: Overrides): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): TreeBase {
    return super.attach(address) as TreeBase;
  }
  connect(signer: Signer): TreeBaseFactory {
    return super.connect(signer) as TreeBaseFactory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TreeBase {
    return new Contract(address, _abi, signerOrProvider) as TreeBase;
  }
}

const _abi = [
  {
    inputs: [],
    name: "DEPTH",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "WITNESS_LENGTH",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    name: "ZEROS",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32"
      }
    ],
    stateMutability: "view",
    type: "function"
  }
];

const _bytecode =
  "0x610480604052600060808181527fad3228b676f7d3cd4284a5443f17f1962b36e491b30a40b2405849e597ba5fb560a0527fb4c11951957c6f8f642c4af61cd6b24640fec6dc7fc607ee8206a99e92410d3060c0527f21ddb9a356815c3fac1026b6dec5df3124afbadb485c9ba5a3e3398a04b7ba8560e0527fe58769b32a1beaf1ea27375a44095a0d1fb664ce2dd358e7fcbfb78c26a19344610100527f0eb01ebfc9ed27500cd4dfc979272d1f0913cc9f66540d7e8005811109e1cf2d610120527f887c22bd8750d34016ac3c66b5ff102dacdd73f6b014e710b51e8022af9a1968610140527fffd70157e48063fc33c97a050f7f640233bf646cc98d9524c6b92bcf3ab56f83610160527f9867cc5f7f196b93bae1e27e6320742445d290f2263827498b54fec539f756af610180527fcefad4e508c098b9a7e1d8feb19955fb02ba9675585078710969d3440f5054e06101a0527ff9dc3e7fe016e050eff260334f18a5d4fe391d82092319f5964f2e2eb7c1c3a56101c0527ff8b13a49e282f609c317a833fb8d976d11517c571d1221a265d25af778ecf8926101e0527f3490c6ceeb450aecdc82e28293031d10c7d73bf85e57bf041a97360aa2c5d99c610200527fc1df82d9c4b87413eae2ef048f94b4d3554cea73d92b0f7af96e0271c691e2bb610220527f5c67add7c6caf302256adedf7ab114da0acfe870d449a3a489f781d659e8becc610240527fda7bce9f4e8618b6bd2f4132ce798cdc7a60e7e1460a7299e3c6342a579626d2610260527f2733e50f526ec2fa19a22b31e8ed50f23cd1fdf94c9154ed3a7609a2f1ff981f610280527fe1d3b5c807b281e4683cc6d6315cf95b9ade8641defcb32372f1c126e398ef7a6102a0527f5a2dce0a8a7f68bb74560f8f71837c2c2ebbcbf7fffb42ae1896f13f7c7479a06102c0527fb46a28b6f55540f89444f63de0378e3d121be09e06cc9ded1c20e65876d36aa06102e0527fc65e9645644786b620e2dd2ad648ddfcbf4a7e5b1a3a4ecfe7f64667a3f0b7e2610300527ff4418588ed35a2458cffeb39b93d26f18d2ab13bdce6aee58e7b99359ec2dfd9610320527f5a9c16dc00d6ef18b7933a6f8dc65ccb55667138776f7dea101070dc8796e377610340527f4df84f40ae0c8229d0d6069e5c8f39a7c299677a09d367fc7b05e3bc380ee652610360527fcdc72595f74c7b1043d0e1ffbab734648c838dfb0527d971b602bc216c9619ef610380527f0abf5ac974a1ed57f4050aa510dd9c74f508277b39d7973bb2dfccc5eeb0618d6103a0527fb8cd74046ff337f0a7bf2c8e03e10f642c1886798d71806ab1e888d9e5ee87d06103c0527f838c5655cb21c6cb83313b5a631175dff4963772cce9108188b34ac87c81c41e6103e0527f662ee4dd2dd7b2bc707961b1e646c4047669dcb6584f0d8d770daf5d7e7deb2e610400527f388ab20e2573d171a88108e79d820e98f26c0b84aa8b2f4aa4968dbb818ea322610420527f93237c50ba75ee485f4c22adf2f741400bdf8d6a9cc7df7ecae576221665d735610440527f8448818bb4ae4562849e949e17ac16e0be16688e156b5cf15e098c627c0056a961046052610490919060206104a3565b5034801561049d57600080fd5b506104fe565b82602081019282156104d1579160200282015b828111156104d15782518255916020019190600101906104b6565b506104dd9291506104e1565b5090565b6104fb91905b808211156104dd57600081556001016104e7565b90565b60c18061050c6000396000f3fe6080604052348015600f57600080fd5b5060043610603c5760003560e01c80635e71468b14604157806398366e35146041578063ae164f29146059575b600080fd5b60476073565b60408051918252519081900360200190f35b604760048036036020811015606d57600080fd5b50356078565b602081565b60008160208110608457fe5b015490508156fea26469706673582212208da9a8a2b71102e183a61186a1ea7610968580bccf682a3d83dccc41813ba41664736f6c634300060a0033";
