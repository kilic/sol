/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface AsmInterface extends ethers.utils.Interface {
  functions: {
    "calculateRootCalldata(uint256,bytes32,bytes32[32])": FunctionFragment;
    "calculateRootMemory(uint256,bytes32,bytes32[32])": FunctionFragment;
    "calculateRootUnrolled(uint256,bytes32,bytes32[32])": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "calculateRootCalldata",
    values: [BigNumberish, BytesLike, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateRootMemory",
    values: [BigNumberish, BytesLike, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateRootUnrolled",
    values: [BigNumberish, BytesLike, BytesLike[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "calculateRootCalldata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateRootMemory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateRootUnrolled",
    data: BytesLike
  ): Result;

  events: {};
}

export class Asm extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: AsmInterface;

  functions: {
    calculateRootCalldata(
      stateIndex: BigNumberish,
      leaf: BytesLike,
      witness: BytesLike[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "calculateRootCalldata(uint256,bytes32,bytes32[32])"(
      stateIndex: BigNumberish,
      leaf: BytesLike,
      witness: BytesLike[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    calculateRootMemory(
      stateIndex: BigNumberish,
      leaf: BytesLike,
      witness: BytesLike[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "calculateRootMemory(uint256,bytes32,bytes32[32])"(
      stateIndex: BigNumberish,
      leaf: BytesLike,
      witness: BytesLike[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    calculateRootUnrolled(
      stateIndex: BigNumberish,
      leaf: BytesLike,
      witness: BytesLike[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "calculateRootUnrolled(uint256,bytes32,bytes32[32])"(
      stateIndex: BigNumberish,
      leaf: BytesLike,
      witness: BytesLike[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  calculateRootCalldata(
    stateIndex: BigNumberish,
    leaf: BytesLike,
    witness: BytesLike[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "calculateRootCalldata(uint256,bytes32,bytes32[32])"(
    stateIndex: BigNumberish,
    leaf: BytesLike,
    witness: BytesLike[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  calculateRootMemory(
    stateIndex: BigNumberish,
    leaf: BytesLike,
    witness: BytesLike[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "calculateRootMemory(uint256,bytes32,bytes32[32])"(
    stateIndex: BigNumberish,
    leaf: BytesLike,
    witness: BytesLike[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  calculateRootUnrolled(
    stateIndex: BigNumberish,
    leaf: BytesLike,
    witness: BytesLike[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "calculateRootUnrolled(uint256,bytes32,bytes32[32])"(
    stateIndex: BigNumberish,
    leaf: BytesLike,
    witness: BytesLike[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    calculateRootCalldata(
      stateIndex: BigNumberish,
      leaf: BytesLike,
      witness: BytesLike[],
      overrides?: CallOverrides
    ): Promise<{
      0: string;
      1: BigNumber;
    }>;

    "calculateRootCalldata(uint256,bytes32,bytes32[32])"(
      stateIndex: BigNumberish,
      leaf: BytesLike,
      witness: BytesLike[],
      overrides?: CallOverrides
    ): Promise<{
      0: string;
      1: BigNumber;
    }>;

    calculateRootMemory(
      stateIndex: BigNumberish,
      leaf: BytesLike,
      witness: BytesLike[],
      overrides?: CallOverrides
    ): Promise<{
      0: string;
      1: BigNumber;
    }>;

    "calculateRootMemory(uint256,bytes32,bytes32[32])"(
      stateIndex: BigNumberish,
      leaf: BytesLike,
      witness: BytesLike[],
      overrides?: CallOverrides
    ): Promise<{
      0: string;
      1: BigNumber;
    }>;

    calculateRootUnrolled(
      stateIndex: BigNumberish,
      leaf: BytesLike,
      witness: BytesLike[],
      overrides?: CallOverrides
    ): Promise<{
      0: string;
      1: BigNumber;
    }>;

    "calculateRootUnrolled(uint256,bytes32,bytes32[32])"(
      stateIndex: BigNumberish,
      leaf: BytesLike,
      witness: BytesLike[],
      overrides?: CallOverrides
    ): Promise<{
      0: string;
      1: BigNumber;
    }>;
  };

  filters: {};

  estimateGas: {
    calculateRootCalldata(
      stateIndex: BigNumberish,
      leaf: BytesLike,
      witness: BytesLike[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "calculateRootCalldata(uint256,bytes32,bytes32[32])"(
      stateIndex: BigNumberish,
      leaf: BytesLike,
      witness: BytesLike[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    calculateRootMemory(
      stateIndex: BigNumberish,
      leaf: BytesLike,
      witness: BytesLike[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "calculateRootMemory(uint256,bytes32,bytes32[32])"(
      stateIndex: BigNumberish,
      leaf: BytesLike,
      witness: BytesLike[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    calculateRootUnrolled(
      stateIndex: BigNumberish,
      leaf: BytesLike,
      witness: BytesLike[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "calculateRootUnrolled(uint256,bytes32,bytes32[32])"(
      stateIndex: BigNumberish,
      leaf: BytesLike,
      witness: BytesLike[],
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    calculateRootCalldata(
      stateIndex: BigNumberish,
      leaf: BytesLike,
      witness: BytesLike[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "calculateRootCalldata(uint256,bytes32,bytes32[32])"(
      stateIndex: BigNumberish,
      leaf: BytesLike,
      witness: BytesLike[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    calculateRootMemory(
      stateIndex: BigNumberish,
      leaf: BytesLike,
      witness: BytesLike[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "calculateRootMemory(uint256,bytes32,bytes32[32])"(
      stateIndex: BigNumberish,
      leaf: BytesLike,
      witness: BytesLike[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    calculateRootUnrolled(
      stateIndex: BigNumberish,
      leaf: BytesLike,
      witness: BytesLike[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "calculateRootUnrolled(uint256,bytes32,bytes32[32])"(
      stateIndex: BigNumberish,
      leaf: BytesLike,
      witness: BytesLike[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
