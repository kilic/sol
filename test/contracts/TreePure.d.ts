/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface TreePureInterface extends ethers.utils.Interface {
  functions: {
    "DEPTH()": FunctionFragment;
    "WITNESS_LENGTH()": FunctionFragment;
    "ZEROS(uint256)": FunctionFragment;
    "checkStateInclusion(bytes32,uint256,bytes32,bytes32[32])": FunctionFragment;
    "calculateRoot(bytes32[])": FunctionFragment;
    "calculateRootTruncated(bytes32[])": FunctionFragment;
    "gas_cost_checkStateInclusion(bytes32,uint256,bytes32,bytes32[32])": FunctionFragment;
    "gas_cost_calculateRoot(bytes32[])": FunctionFragment;
    "gas_cost_calculateRootTruncated(bytes32[])": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "DEPTH", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "WITNESS_LENGTH",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "ZEROS", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "checkStateInclusion",
    values: [BytesLike, BigNumberish, BytesLike, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateRoot",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateRootTruncated",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "gas_cost_checkStateInclusion",
    values: [BytesLike, BigNumberish, BytesLike, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "gas_cost_calculateRoot",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "gas_cost_calculateRootTruncated",
    values: [BytesLike[]]
  ): string;

  decodeFunctionResult(functionFragment: "DEPTH", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "WITNESS_LENGTH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ZEROS", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "checkStateInclusion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateRootTruncated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "gas_cost_checkStateInclusion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "gas_cost_calculateRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "gas_cost_calculateRootTruncated",
    data: BytesLike
  ): Result;

  events: {};
}

export class TreePure extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: TreePureInterface;

  functions: {
    DEPTH(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "DEPTH()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    WITNESS_LENGTH(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "WITNESS_LENGTH()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    ZEROS(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "ZEROS(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    checkStateInclusion(
      root: BytesLike,
      stateIndex: BigNumberish,
      leaf: BytesLike,
      witness: BytesLike[],
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "checkStateInclusion(bytes32,uint256,bytes32,bytes32[32])"(
      root: BytesLike,
      stateIndex: BigNumberish,
      leaf: BytesLike,
      witness: BytesLike[],
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    calculateRoot(
      buf: BytesLike[],
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "calculateRoot(bytes32[])"(
      buf: BytesLike[],
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    calculateRootTruncated(
      buf: BytesLike[],
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "calculateRootTruncated(bytes32[])"(
      buf: BytesLike[],
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    gas_cost_checkStateInclusion(
      root: BytesLike,
      stateIndex: BigNumberish,
      leaf: BytesLike,
      witness: BytesLike[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "gas_cost_checkStateInclusion(bytes32,uint256,bytes32,bytes32[32])"(
      root: BytesLike,
      stateIndex: BigNumberish,
      leaf: BytesLike,
      witness: BytesLike[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    gas_cost_calculateRoot(
      buf: BytesLike[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "gas_cost_calculateRoot(bytes32[])"(
      buf: BytesLike[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    gas_cost_calculateRootTruncated(
      buf: BytesLike[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "gas_cost_calculateRootTruncated(bytes32[])"(
      buf: BytesLike[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  DEPTH(overrides?: CallOverrides): Promise<BigNumber>;

  "DEPTH()"(overrides?: CallOverrides): Promise<BigNumber>;

  WITNESS_LENGTH(overrides?: CallOverrides): Promise<BigNumber>;

  "WITNESS_LENGTH()"(overrides?: CallOverrides): Promise<BigNumber>;

  ZEROS(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "ZEROS(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  checkStateInclusion(
    root: BytesLike,
    stateIndex: BigNumberish,
    leaf: BytesLike,
    witness: BytesLike[],
    overrides?: CallOverrides
  ): Promise<boolean>;

  "checkStateInclusion(bytes32,uint256,bytes32,bytes32[32])"(
    root: BytesLike,
    stateIndex: BigNumberish,
    leaf: BytesLike,
    witness: BytesLike[],
    overrides?: CallOverrides
  ): Promise<boolean>;

  calculateRoot(buf: BytesLike[], overrides?: CallOverrides): Promise<string>;

  "calculateRoot(bytes32[])"(
    buf: BytesLike[],
    overrides?: CallOverrides
  ): Promise<string>;

  calculateRootTruncated(
    buf: BytesLike[],
    overrides?: CallOverrides
  ): Promise<string>;

  "calculateRootTruncated(bytes32[])"(
    buf: BytesLike[],
    overrides?: CallOverrides
  ): Promise<string>;

  gas_cost_checkStateInclusion(
    root: BytesLike,
    stateIndex: BigNumberish,
    leaf: BytesLike,
    witness: BytesLike[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "gas_cost_checkStateInclusion(bytes32,uint256,bytes32,bytes32[32])"(
    root: BytesLike,
    stateIndex: BigNumberish,
    leaf: BytesLike,
    witness: BytesLike[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  gas_cost_calculateRoot(
    buf: BytesLike[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "gas_cost_calculateRoot(bytes32[])"(
    buf: BytesLike[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  gas_cost_calculateRootTruncated(
    buf: BytesLike[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "gas_cost_calculateRootTruncated(bytes32[])"(
    buf: BytesLike[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    DEPTH(overrides?: CallOverrides): Promise<BigNumber>;

    "DEPTH()"(overrides?: CallOverrides): Promise<BigNumber>;

    WITNESS_LENGTH(overrides?: CallOverrides): Promise<BigNumber>;

    "WITNESS_LENGTH()"(overrides?: CallOverrides): Promise<BigNumber>;

    ZEROS(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "ZEROS(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    checkStateInclusion(
      root: BytesLike,
      stateIndex: BigNumberish,
      leaf: BytesLike,
      witness: BytesLike[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    "checkStateInclusion(bytes32,uint256,bytes32,bytes32[32])"(
      root: BytesLike,
      stateIndex: BigNumberish,
      leaf: BytesLike,
      witness: BytesLike[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    calculateRoot(buf: BytesLike[], overrides?: CallOverrides): Promise<string>;

    "calculateRoot(bytes32[])"(
      buf: BytesLike[],
      overrides?: CallOverrides
    ): Promise<string>;

    calculateRootTruncated(
      buf: BytesLike[],
      overrides?: CallOverrides
    ): Promise<string>;

    "calculateRootTruncated(bytes32[])"(
      buf: BytesLike[],
      overrides?: CallOverrides
    ): Promise<string>;

    gas_cost_checkStateInclusion(
      root: BytesLike,
      stateIndex: BigNumberish,
      leaf: BytesLike,
      witness: BytesLike[],
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
      1: BigNumber;
    }>;

    "gas_cost_checkStateInclusion(bytes32,uint256,bytes32,bytes32[32])"(
      root: BytesLike,
      stateIndex: BigNumberish,
      leaf: BytesLike,
      witness: BytesLike[],
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
      1: BigNumber;
    }>;

    gas_cost_calculateRoot(
      buf: BytesLike[],
      overrides?: CallOverrides
    ): Promise<{
      0: string;
      1: BigNumber;
    }>;

    "gas_cost_calculateRoot(bytes32[])"(
      buf: BytesLike[],
      overrides?: CallOverrides
    ): Promise<{
      0: string;
      1: BigNumber;
    }>;

    gas_cost_calculateRootTruncated(
      buf: BytesLike[],
      overrides?: CallOverrides
    ): Promise<{
      0: string;
      1: BigNumber;
    }>;

    "gas_cost_calculateRootTruncated(bytes32[])"(
      buf: BytesLike[],
      overrides?: CallOverrides
    ): Promise<{
      0: string;
      1: BigNumber;
    }>;
  };

  filters: {};

  estimateGas: {
    DEPTH(overrides?: CallOverrides): Promise<BigNumber>;

    "DEPTH()"(overrides?: CallOverrides): Promise<BigNumber>;

    WITNESS_LENGTH(overrides?: CallOverrides): Promise<BigNumber>;

    "WITNESS_LENGTH()"(overrides?: CallOverrides): Promise<BigNumber>;

    ZEROS(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "ZEROS(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkStateInclusion(
      root: BytesLike,
      stateIndex: BigNumberish,
      leaf: BytesLike,
      witness: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "checkStateInclusion(bytes32,uint256,bytes32,bytes32[32])"(
      root: BytesLike,
      stateIndex: BigNumberish,
      leaf: BytesLike,
      witness: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateRoot(
      buf: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calculateRoot(bytes32[])"(
      buf: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateRootTruncated(
      buf: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calculateRootTruncated(bytes32[])"(
      buf: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    gas_cost_checkStateInclusion(
      root: BytesLike,
      stateIndex: BigNumberish,
      leaf: BytesLike,
      witness: BytesLike[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "gas_cost_checkStateInclusion(bytes32,uint256,bytes32,bytes32[32])"(
      root: BytesLike,
      stateIndex: BigNumberish,
      leaf: BytesLike,
      witness: BytesLike[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    gas_cost_calculateRoot(
      buf: BytesLike[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "gas_cost_calculateRoot(bytes32[])"(
      buf: BytesLike[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    gas_cost_calculateRootTruncated(
      buf: BytesLike[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "gas_cost_calculateRootTruncated(bytes32[])"(
      buf: BytesLike[],
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DEPTH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "DEPTH()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    WITNESS_LENGTH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "WITNESS_LENGTH()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ZEROS(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "ZEROS(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkStateInclusion(
      root: BytesLike,
      stateIndex: BigNumberish,
      leaf: BytesLike,
      witness: BytesLike[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "checkStateInclusion(bytes32,uint256,bytes32,bytes32[32])"(
      root: BytesLike,
      stateIndex: BigNumberish,
      leaf: BytesLike,
      witness: BytesLike[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateRoot(
      buf: BytesLike[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "calculateRoot(bytes32[])"(
      buf: BytesLike[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateRootTruncated(
      buf: BytesLike[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "calculateRootTruncated(bytes32[])"(
      buf: BytesLike[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    gas_cost_checkStateInclusion(
      root: BytesLike,
      stateIndex: BigNumberish,
      leaf: BytesLike,
      witness: BytesLike[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "gas_cost_checkStateInclusion(bytes32,uint256,bytes32,bytes32[32])"(
      root: BytesLike,
      stateIndex: BigNumberish,
      leaf: BytesLike,
      witness: BytesLike[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    gas_cost_calculateRoot(
      buf: BytesLike[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "gas_cost_calculateRoot(bytes32[])"(
      buf: BytesLike[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    gas_cost_calculateRootTruncated(
      buf: BytesLike[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "gas_cost_calculateRootTruncated(bytes32[])"(
      buf: BytesLike[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
