/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Signer } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides } from "@ethersproject/contracts";

import { TreeConsumer } from "./TreeConsumer";

export class TreeConsumerFactory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(overrides?: Overrides): Promise<TreeConsumer> {
    return super.deploy(overrides || {}) as Promise<TreeConsumer>;
  }
  getDeployTransaction(overrides?: Overrides): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): TreeConsumer {
    return super.attach(address) as TreeConsumer;
  }
  connect(signer: Signer): TreeConsumerFactory {
    return super.connect(signer) as TreeConsumerFactory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TreeConsumer {
    return new Contract(address, _abi, signerOrProvider) as TreeConsumer;
  }
}

const _abi = [
  {
    inputs: [],
    name: "WITNESS_LENGTH",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "root",
        type: "bytes32"
      },
      {
        internalType: "uint256",
        name: "stateIndex",
        type: "uint256"
      },
      {
        internalType: "bytes32",
        name: "leaf",
        type: "bytes32"
      },
      {
        internalType: "bytes32[32]",
        name: "witness",
        type: "bytes32[32]"
      }
    ],
    name: "checkStateInclusion",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  }
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610202806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80635e71468b1461003b578063cb21cbd014610055575b600080fd5b6100436100d1565b60408051918252519081900360200190f35b6100b6600480360361046081101561006c57600080fd5b604080516104008181018352843594602080820135959482013594820193919261046084019291606085019183908390808284376000920191909152509194506100d69350505050565b60408051921515835260208301919091528051918290030190f35b602081565b6000806000805a90506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663cb21cbd0898989896040518563ffffffff1660e01b815260040180858152602001848152602001838152602001826020800280838360005b83811015610168578181015183820152602001610150565b5050505090500194505050505060206040518083038186803b15801561018d57600080fd5b505afa1580156101a1573d6000803e3d6000fd5b505050506040513d60208110156101b757600080fd5b50519150815a9099910397509550505050505056fea2646970667358221220df9d6551829d145015a24d6d5b65c633ad21145ed88ce95840b7e14e5e16f40864736f6c634300060a0033";
